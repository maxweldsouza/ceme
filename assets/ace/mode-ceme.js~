ace.define("ace/mode/ceme_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/text_highlight_rules"], function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var MyNewHighlightRules = function() {

    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used
   this.$rules = {
        "start" : [
            {
                token: "comment",
                regex: "#.*$",
            },
            {
                token: "keyword",
                regex: "function|define",
            },
            {
                token: "string",
                regex: /"""/,
                next: "longstring"
            },
            {
                token: "string",
                regex: /'''/,
                next: "longstring"
            },
            {
                token: "string",
                regex: /"(?:\\["'\\\/bfnrt]|[^\\"\n\r])*"/,
            },
            {
                token: "string",
                regex: /'(?:\\["'\\\/bfnrt]|[^\\'\n\r])*'/,
            },
            {
                token: "constant.numeric",
                regex: /-?(0|[1-9][0-9]*)(\.[0-9]*)?([eE][+-]?[0-9]*)?/,
            },
            {
                token: "constant.language",
                regex: 'true|false',
            },
            {
                token: "support.function",
                regex: 'h1|h2|h3|h4|h5|h6|p|ul|li',
            },
            {
                token: "identifier",
                regex: /[a-zA-Z0-9]+/,
            },
        ],
        "longstring": [
            {
                token: "string",
                regex: /"""/,
                next: "start",
            },
            {
                token: "string",
                regex: /'''/,
                next: "start",
            },
            {
                token: "string",
                regex: /([^"]|\\")|([^']|\\')/,
            },
        ]
    };
};

oop.inherits(MyNewHighlightRules, TextHighlightRules);

exports.MyNewHighlightRules = MyNewHighlightRules;

});
